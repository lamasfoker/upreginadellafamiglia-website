name: CI

on:
  push:
    branches: [ master ]

  workflow_dispatch:

jobs:

  build:
    name: Build the artifact
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Setup PHP and Composer
        uses: shivammathur/setup-php@master
        with:
          php-version: 7.4
          tools: composer:v2
          coverage: none
      - name: Install PHP dependencies and compile assets
        env:
          APP_ENV: prod
          APP_DEBUG: 0
          CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
          CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_ACCESS_TOKEN }}
        run: |
          composer install --verbose --prefer-dist --no-progress --no-interaction --no-dev --optimize-autoloader
          bin/console assets:install public --no-debug -vvv

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-
      - uses: actions/setup-node@v2
        with:
          node-version: '15.x'
      - name: Install Javascript dependencies
        run: |
          yarn install
          yarn run build

      - name: Compress the artifact
        run: zip --symlinks -q -r build.zip . -x "./node_modules/*" "./tests/*" "./assets/*" "./.github/*"
      - name: Archive the artifact
        uses: actions/upload-artifact@v2
        with:
          name: artifact-build
          path: build.zip

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Setup PHP and Composer
        uses: shivammathur/setup-php@master
        with:
          php-version: 7.4
          tools: composer:v2, composer-require-checker, symfony-cli
          coverage: none
      - name: Install PHP dependencies
        env:
          CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
          CONTENTFUL_ACCESS_TOKEN: ${{ secrets.CONTENTFUL_ACCESS_TOKEN }}
        run: composer install -n --prefer-dist

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-
      - uses: actions/setup-node@v2
        with:
          node-version: '15.x'
      - name: Install Javascript dependencies
        run: yarn install

      - name: Run Static test and Code validation
        run: |
          composer validate --no-check-publish
          composer-require-checker.phar check
          symfony security:check
          vendor/bin/ecs check src
          vendor/bin/phpstan analyse -c phpstan.neon
          bin/console lint:twig templates/
          yarn run eslint .eslintrc.js

  deploy:
    name: Deploy to production
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - name: Setup PHP
        uses: shivammathur/setup-php@master
        with:
          php-version: 7.4
          coverage: none
          tools: deployer:v6.8.0

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: artifact-build

      - name: Add hosts.yml
        run: echo '${{ secrets.HOSTS_YML }}' > hosts.yml
      - name: Deploy to Production
        uses: deployphp/action@master
        with:
          private-key: ${{ secrets.PRIVATE_KEY }}
          known-hosts: ${{ secrets.KNOWN_HOSTS }}
          dep: deploy production -vvv